package com.example;

import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PersonRepository {
   private Connection connection;

   private String creaeTableSql = "CREATE TABLE person (" +
           "id INT GENERATED BY DEFAULT AS IDENTITY," +
           "name VARCHAR(20)," +
           "surname VARCHAR(50)," +
           "age INT" +
           ")";

   private String insertSql = ""+
    "INSERT INTO person(name, surname, age) VALUES (?,?,?)";

   private String deleteSql = "DELETE FROM person WHERE id=?";

   private String updateSql = "UPDATE person SET name=? WHERE id=?";

    private String selectAllSql = "SELECT * FROM person";

    //private String updateSql = "UPDATE person SET name=? surname? itd. "



   private Statement createTable;
   private PreparedStatement insert;
   private PreparedStatement delete;
   private PreparedStatement update;
   private PreparedStatement selectAll;

    public PersonRepository() {
        try {
            connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
            createTable = connection.createStatement();
            insert = connection.prepareStatement(insertSql);
            delete = connection.prepareStatement(deleteSql);
            update = connection.prepareStatement(updateSql);
            selectAll = connection.prepareStatement(selectAllSql);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    public List<Person> getAll() {
        List<Person> result = new ArrayList<>();

        try {
            ResultSet resultSet = selectAll.executeQuery();
            while (resultSet.next()) {
                Person person = new Person();
                person.setId(resultSet.getInt("id"));
                person.setName(resultSet.getString("name"));
                person.setSurname(resultSet.getString("surname"));
                person.setAge(resultSet.getInt("age"));
                result.add(person);
            }
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        return result;
    }

    public void update(Person person){
        try {
            //o
            //o
            update.setString(1, person.getName());
            update.setInt(2, person.getId());
            update.executeUpdate();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

    }

    public void delete(Person person){
        try {
            delete.setInt(1, person.getId());
            delete.executeUpdate();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    public int add(Person person){
        try {
            insert.setString(1, person.getName());
            insert.setString(2, person.getSurname());
            insert.setInt(3, person.getAge());
            insert.executeUpdate();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        return -1;
    }

    public void createTable() {
        try {

            ResultSet resultSet = connection.getMetaData().getTables(null, null, null, null);//wyciÄ…ga dane z db nulle to wszystko
            boolean tableExist = false;
            while (resultSet.next()) {
                if (resultSet.getString("TABLE_NAME").equalsIgnoreCase("Person")) {
                    tableExist = true;
                    break;
                }
            }
            if (!tableExist)
                createTable.execute(creaeTableSql);
        }
        catch (SQLException throwables) {
            throwables.printStackTrace();
        }

    }
}
